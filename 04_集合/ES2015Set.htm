<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
</head>

<body>
  <script>
    const set = new Set()

    set.add(1)
    console.log(set.values()) // outputs @Iterator
    console.log(set.has(1)) // outputs true
    console.log(set.size) // outputs 1

    set.add(2);
    console.log(set.values())// outputs [1, 2]
    console.log(set.has(2)) // true
    console.log(set.size) // 2

    set.delete(1)
    console.log(set.values())

    set.delete(2)
    console.log(set.values()) // outputs []

    const setA = new Set()
    setA.add(1)
    setA.add(2)
    setA.add(3)

    const setB = new Set()
    setB.add(2)
    setB.add(3)
    setB.add(4)

    console.log('————————————————————————————拓展原生Set的方法—————————————————————————————————————')
    // 并集
    const union = (setA, setB) => {
      const unionAB = new Set()
      setA.forEach(value => unionAB.add(value))
      setB.forEach(value => unionAB.add(value))
      return unionAB
    }
    console.log(union(setA, setB))
    // 交集
    const intersection = (setA, setB) => {
      const intersectionSet = new Set()

      setA.forEach(value => {
        if (setB.has(value)) {
          intersectionSet.add(value)
        }
      })
      return intersectionSet
    }
    console.log(intersection(setA, setB))

    // 差集
    const difference = (setA, setB) => {
      const differenceSet = new Set()
      setA.forEach(value => {
        if (!setB.has(value)) {
          differenceSet.add(value)
        }
      })
      return differenceSet
    }
    console.log(difference(setA, setB))

    // 子集
    const isSubsetOf = (setA, setB) => {
      if (setA.length > setB.length) {
        return false
      }
      // const SETA = [...setA]
      let isSubsetOf = true
      Array.from(setA).every(value => {                           // 这里用的是 Array.from() 转换成数组
        if (!setB.has(value)) {
          isSubsetOf = false
          return false
        }
        return true
      })
      return isSubsetOf
    }
    console.log(isSubsetOf(setA, setB))
    console.log('————————————————————————————使用拓宽运算符—————————————————————————————————————————')
    console.log(new Set([...setA, ...setB]))
    console.log(new Set([...setA].filter(x => setB.has(x))))
    console.log(new Set([...setA].filter(x => !setB.has(x))))


  </script>
</body>

</html>